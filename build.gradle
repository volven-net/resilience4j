plugins {
    id "org.sonarqube" version "3.2.0"
    id 'org.asciidoctor.convert' version '1.6.0'
    id "org.gradle.test-retry" version "1.2.1"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id "me.champeau.jmh" version "0.6.5"
    id 'idea'
}

apply from: "${rootDir}/libraries.gradle"

allprojects {
    apply plugin: 'jacoco'

    version = '1.8.0-EX'
    group = 'io.github.resilience4j'
    description = 'Resilience4j is a lightweight, easy-to-use fault tolerance library designed for Java8 and functional programming'

    repositories {
        mavenCentral()
    }
}

ext {
    coreProjects = subprojects.findAll {
        p -> !p.name.endsWith("-bom")
    }
}

    configure(project.coreProjects) {
        apply plugin: 'java'
        apply plugin: 'java-library'
        apply plugin: 'maven-publish'
        apply plugin: 'signing'
        apply from: "${rootDir}/publishing.gradle"
        apply plugin: "org.gradle.test-retry"
        apply plugin: 'me.champeau.jmh'

        tasks.withType(Test).all {
            if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
                jvmArgs += [
                        "-XX:+AllowRedefinitionToAddDeleteMethods"
                ]
            }
            publishing {

                repositories {
                    maven {
                        name = "GitHubPackages"
                        url = uri("https://maven.pkg.github.com/volven-net/resilience4j")
                        credentials {
                            username = project.findProperty("github_username") ?: System.getenv("GITHUB_ACTOR")
                            password = project.findProperty("github_token") ?: System.getenv("GITHUB_TOKEN")
                        }
                    }
                }

                publications {
                    maven(MavenPublication) {
//                        version System.getenv("APP_VERSION") ?: "LOCAL-SNAPSHOT"
                        from components.java
                    }
                }
            }
        }


    dependencies {
        api (libraries.vavr)
        implementation (libraries.slf4j)

        // JSR-305 only used for non-required meta-annotations
        compileOnly "com.google.code.findbugs:jsr305:3.0.2"

        testImplementation (libraries.junit)
        testImplementation (libraries.assertj)
        testImplementation (libraries.logback)
        testImplementation (libraries.mockito)
        testImplementation (libraries.powermock)
        testImplementation (libraries.powermock_api_mockito)
        testImplementation (libraries.powermock_module_junit4)
        testImplementation (libraries.awaitility)
        testImplementation (libraries.jaxws)
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
        options.deprecation = true
        options.encoding = 'UTF-8'
        options.compilerArgs += ["-Xlint:unchecked", "-parameters"]
    }

    test {
        retry {
            maxRetries = 3
            maxFailures = 20
            failOnPassedAfterRetry = true
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    afterEvaluate {
        jar {
            inputs.property('moduleName', moduleName)
            manifest.attributes(
                    'Automatic-Module-Name': moduleName
            )
        }
    }
}

def allTestCoverageFile = "${rootProject.projectDir}/build/reports/jacoco/report.xml"

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "resilience4j"
        property "sonar.projectName", "resilience4j"
        property "sonar.projectKey", "resilience4j_resilience4j"
        property "sonar.links.homepage", "https://github.com/resilience4j/resilience4j"
        property "sonar.links.ci", "https://travis-ci.org/resilience4j/resilience4j"
        property "sonar.links.scm", "https://github.com/resilience4j/resilience4j"
        property "sonar.links.issue", "https://github.com/resilience4j/resilience4j/issues"
        property "sonar.language", "java"
        property "sonar.coverage.jacoco.xmlReportPaths", allTestCoverageFile
    }
}

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
}

task jacocoRootTestReport(type: JacocoReport) {

    coreProjects.each { dependsOn("${it.name}:test") }
    coreProjects.each { dependsOn("${it.name}:jacocoTestReport") }

    additionalSourceDirs.from = coreProjects.sourceSets.main.allSource.srcDirs
    sourceDirectories.from = coreProjects.sourceSets.main.allSource.srcDirs
    classDirectories.from = coreProjects.sourceSets.main.output
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')

    onlyIf {
        true
    }

    reports {
        xml.enabled true
        xml.destination file(allTestCoverageFile)
        html.enabled true
        csv.enabled false
    }
}

tasks.check.dependsOn tasks.jacocoRootTestReport
//tasks.jacocoRootTestReport.dependsOn tasks.test

